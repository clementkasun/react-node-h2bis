{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\n// import Button from \"./button\";\nimport Form from \"./Form.js\";\nimport { useState } from \"react\";\nimport Table from \"./Table.js\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UpdateForm = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    designation: \"\",\n    mobile_no: \"\",\n    email: \"\",\n    address: \"\"\n  });\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Inside your UpdateForm component\n  const handleSubmit = e => {\n    e.preventDefault();\n    addDataToTable(formData); // Call the function to add data to the table\n    setFormData({\n      name: \"\",\n      designation: \"\",\n      email: \"\",\n      mobile_no: \"\",\n      address: \"\"\n    }); // Clear the form fields\n  };\n\n  const [mainFormData, setMainFormData] = useState({\n    customer_type: \"\",\n    reff_no: \"\",\n    title: \"\",\n    company_name: \"\",\n    cust_name: \"\",\n    identity_number: \"\",\n    open_balance: \"\",\n    sales_person: \"\",\n    posting_address: \"\",\n    name: \"\",\n    designation: \"\",\n    email: \"\",\n    mobile_no: \"\",\n    address: \"\"\n  });\n  const handleMainInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setMainFormData({\n      ...mainFormData,\n      [name]: value\n    });\n  };\n  const showToast = () => {\n    toast.success(\"This is a success toast!\", {\n      position: toast.POSITION.TOP_RIGHT,\n      autoClose: 3000 // Set the duration in milliseconds (e.g., 3000 = 3 seconds)\n    });\n  };\n\n  const [errors, setErrors] = useState({});\n  const handleMainFormSubmit = async e => {\n    e.preventDefault();\n\n    // Check for empty required fields\n    const newErrors = {};\n    if (!mainFormData.customer_type.trim()) {\n      newErrors.customer_type = \"Customer type is required\";\n    }\n\n    // Update the errors state\n    setErrors(newErrors);\n\n    // If there are no errors, proceed with form submission\n    if (Object.keys(newErrors).length === 0) {\n      try {\n        const response = await axios.post(`http://localhost:3001/api/update-data/${id}`, {\n          mainFormData,\n          tableData\n        });\n        if (response.data.message === \"Data saved successfully\") {\n          console.log(\"Data saved successfully\");\n        }\n      } catch (error) {\n        console.error(\"Error saving data:\", error);\n      }\n    } else {\n      alert(\"Please fill all the fields\");\n    }\n  };\n  const [tableData, setTableData] = useState([]);\n  const addDataToTable = formData => {\n    setTableData([...tableData, formData]);\n  };\n  const [AddressVal, setAddressVal] = useState(\"\");\n  const [billingAddressVal, setBillingAddressVal] = useState(\"\");\n  const [duplicatedAddress, setduplicatedAddress] = useState(\"\");\n  const handleAddressChange = e => {\n    setAddressVal(e.target.value);\n  };\n  const handleBillingAddressChange = e => {\n    setBillingAddressVal(e.target.value);\n  };\n  const handleAddressDuplicate = () => {\n    setduplicatedAddress(AddressVal);\n  };\n  const [locationVal, setLocationVal] = useState(\"\");\n  const [secondLocationVal, setSecondLocationVal] = useState(\"\");\n  const [duplicatedLocation, setduplicatedLocation] = useState(\"\");\n  const handleLocationChange = e => {\n    setLocationVal(e.target.value);\n  };\n  const handleSecondLocationChange = e => {\n    setSecondLocationVal(e.target.value);\n  };\n  const handleLocationDuplicate = () => {\n    setduplicatedLocation(locationVal);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(UpdateForm, \"mmCUto8v2Rwl8t17+7/2sBGEEfY=\", false, function () {\n  return [useParams];\n});\n_c = UpdateForm;\nvar _c;\n$RefreshReg$(_c, \"UpdateForm\");","map":{"version":3,"names":["React","Form","useState","Table","axios","useParams","ToastContainer","Fragment","_Fragment","jsxDEV","_jsxDEV","UpdateForm","_s","id","formData","setFormData","name","designation","mobile_no","email","address","handleInputChange","e","value","target","handleSubmit","preventDefault","addDataToTable","mainFormData","setMainFormData","customer_type","reff_no","title","company_name","cust_name","identity_number","open_balance","sales_person","posting_address","handleMainInputChange","showToast","toast","success","position","POSITION","TOP_RIGHT","autoClose","errors","setErrors","handleMainFormSubmit","newErrors","trim","Object","keys","length","response","post","tableData","data","message","console","log","error","alert","setTableData","AddressVal","setAddressVal","billingAddressVal","setBillingAddressVal","duplicatedAddress","setduplicatedAddress","handleAddressChange","handleBillingAddressChange","handleAddressDuplicate","locationVal","setLocationVal","secondLocationVal","setSecondLocationVal","duplicatedLocation","setduplicatedLocation","handleLocationChange","handleSecondLocationChange","handleLocationDuplicate","_c","$RefreshReg$"],"sources":["C:/Users/usre/Desktop/react-node/sample-react-h2bis/src/UpdateForm.js"],"sourcesContent":["import React from \"react\";\r\n// import Button from \"./button\";\r\nimport Form from \"./Form.js\";\r\nimport { useState } from \"react\";\r\nimport Table from \"./Table.js\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const UpdateForm = () => {\r\n  const { id } = useParams();\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    designation: \"\",\r\n    mobile_no: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  // Inside your UpdateForm component\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addDataToTable(formData); // Call the function to add data to the table\r\n    setFormData({\r\n      name: \"\",\r\n      designation: \"\",\r\n      email: \"\",\r\n      mobile_no: \"\",\r\n      address: \"\",\r\n    }); // Clear the form fields\r\n  };\r\n\r\n  const [mainFormData, setMainFormData] = useState({\r\n    customer_type: \"\",\r\n    reff_no: \"\",\r\n    title: \"\",\r\n    company_name: \"\",\r\n    cust_name: \"\",\r\n    identity_number: \"\",\r\n    open_balance: \"\",\r\n    sales_person: \"\",\r\n    posting_address: \"\",\r\n    name: \"\",\r\n    designation: \"\",\r\n    email: \"\",\r\n    mobile_no: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const handleMainInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMainFormData({ ...mainFormData, [name]: value });\r\n  };\r\n\r\n  const showToast = () => {\r\n    toast.success(\"This is a success toast!\", {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n      autoClose: 3000, // Set the duration in milliseconds (e.g., 3000 = 3 seconds)\r\n    });\r\n  };\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleMainFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check for empty required fields\r\n    const newErrors = {};\r\n    if (!mainFormData.customer_type.trim()) {\r\n      newErrors.customer_type = \"Customer type is required\";\r\n    }\r\n\r\n    // Update the errors state\r\n    setErrors(newErrors);\r\n\r\n    // If there are no errors, proceed with form submission\r\n    if (Object.keys(newErrors).length === 0) {\r\n      try {\r\n        const response = await axios.post(\r\n          `http://localhost:3001/api/update-data/${id}`,\r\n          { mainFormData, tableData }\r\n        );\r\n\r\n        if (response.data.message === \"Data saved successfully\") {\r\n          console.log(\"Data saved successfully\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error saving data:\", error);\r\n      }\r\n    } else {\r\n      alert(\"Please fill all the fields\");\r\n    }\r\n  };\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const addDataToTable = (formData) => {\r\n    setTableData([...tableData, formData]);\r\n  };\r\n\r\n  const [AddressVal, setAddressVal] = useState(\"\");\r\n  const [billingAddressVal, setBillingAddressVal] = useState(\"\");\r\n  const [duplicatedAddress, setduplicatedAddress] = useState(\"\");\r\n\r\n  const handleAddressChange = (e) => {\r\n    setAddressVal(e.target.value);\r\n  };\r\n\r\n  const handleBillingAddressChange = (e) => {\r\n    setBillingAddressVal(e.target.value);\r\n  };\r\n\r\n  const handleAddressDuplicate = () => {\r\n    setduplicatedAddress(AddressVal);\r\n  };\r\n\r\n  const [locationVal, setLocationVal] = useState(\"\");\r\n  const [secondLocationVal, setSecondLocationVal] = useState(\"\");\r\n  const [duplicatedLocation, setduplicatedLocation] = useState(\"\");\r\n\r\n  const handleLocationChange = (e) => {\r\n    setLocationVal(e.target.value);\r\n  };\r\n\r\n  const handleSecondLocationChange = (e) => {\r\n    setSecondLocationVal(e.target.value);\r\n  };\r\n\r\n  const handleLocationDuplicate = () => {\r\n    setduplicatedLocation(locationVal);\r\n  };\r\n\r\n  return (\r\n   <>\r\n   </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}